<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" creationComplete="initMap()" xmlns:openscales="http://openscales.org" xmlns:local="*">
	<mx:Canvas width="100%" height="100%">
		<openscales:Map id="fxmap" height="100%" width="100%"
						horizontalScrollPolicy="off" 
						verticalScrollPolicy="off"
						centerLonLat="-68.844519,-32.889682"
						zoom="14"
						>
			<openscales:Mapnik id="mapnik" name="Mapnik" isBaseLayer="true"/>
			<openscales:Spinner id="spinner" x="{width / 2}" y="{height / 2}"/>
			<openscales:DragHandler />
			<openscales:ClickHandler />
			<openscales:WheelHandler />
			<openscales:MousePosition x="{width - 170}" y="{height - 20}"/>
			<openscales:ScaleLine x="{width - 120}" y="{height - 100}" />
		</openscales:Map>
		<mx:ComboBox id="serviceTypeComboBox" change="onServiceTypeComboBoxChange()" x="{width - 200}" y="{5}"> 
			<mx:ArrayCollection>
				<mx:Object label="AMS" data="AMS"/>
				<mx:Object label="WMS" data="WMS"/>
			</mx:ArrayCollection>
		</mx:ComboBox>
		<mx:ComboBox id="mapTypeComboBox" change="onMapTypeComboBoxChange()" x="{width - 120}" y="{5}" 
					 visible="{serviceTypeComboBox.selectedItem.data == 'AMS'}"> 
			<mx:ArrayCollection>
				<mx:Object label="Isoline" data="isoline"/>
				<mx:Object label="Heatmap" data="heatmap"/>
				<mx:Object label="Voronoi" data="voronoi"/>
				<mx:Object label="Point" data="point"/>
			</mx:ArrayCollection>
		</mx:ComboBox>
		<mx:Form x="{width - 400}" y="50" 
				 width="400" visible="{serviceTypeComboBox.selectedItem.data == 'AMS'}" 
				 backgroundAlpha="0.75" backgroundColor="0xFFFFFF"
				 borderStyle="solid" cornerRadius="5">
			<mx:FormItem label="CQL Filter" width="100%">
				<mx:TextArea id="cqlFilterText" width="100%"/>
			</mx:FormItem>
			<mx:FormItem label="Simplify Method" width="100%">
				<mx:ComboBox id="simplifyMethodComboBox"> 
					<mx:ArrayCollection>
						<mx:Object label="Copy" data="{SimplifyMethod.COPY}"/>
						<mx:Object label="Grid" data="{SimplifyMethod.GRID}"/>
						<mx:Object label="Random" data="{SimplifyMethod.RANDOM}"/>
						<mx:Object label="Extremes" data="{SimplifyMethod.EXTREMES}"/>
					</mx:ArrayCollection>
				</mx:ComboBox>
			</mx:FormItem>
			<mx:FormItem label="Simplify Size" width="100%">
				<mx:NumericStepper id="simplifySize" minimum="0" maximum="10000" value="400"/>
			</mx:FormItem>
			<mx:FormItem label="Renderer Type" width="100%">
				<mx:ComboBox id="rendererTypeComboBox"> 
					<mx:ArrayCollection>
						<!--mx:Object label="Dense" data="{RendererType.DENSE}"/-->
						<mx:Object label="Gradient" data="{RendererType.GRADIENT}"/>
						<mx:Object label="Sparse" data="{RendererType.SPARSE}"/>
					</mx:ArrayCollection>
				</mx:ComboBox>
			</mx:FormItem>
			<mx:FormItem label="Interpolaion Strategy" width="100%">
				<mx:ComboBox id="interpolationStrategyComboBox"> 
					<mx:ArrayCollection>
						<mx:Object label="Inverse Distance Weighting" data="{InterpolationStrategy.INVERSE_DISTANCE_WEIGHTING}"/>
						<mx:Object label="Linear" data="{InterpolationStrategy.LINEAR}"/>
						<mx:Object label="Nearest Neighbor" data="{InterpolationStrategy.NEAREST_NEIGHBOR}"/>
						<mx:Object label="Dummy" data="{InterpolationStrategy.DUMMY}"/>
					</mx:ArrayCollection>
				</mx:ComboBox>
			</mx:FormItem>
			<mx:FormItem label="Interpolation Parameter" width="100%">
				<mx:NumericStepper id="interpolationParameterText" minimum="0" maximum="500" value="100"/>
			</mx:FormItem>
			<mx:FormItem label="Ranges" width="100%">
				<local:RangeComponent id="rangeComponent" width="100%"/>
			</mx:FormItem>
			<mx:HBox width="100%" horizontalAlign="right">
				<mx:Button id="updateButton" label="Update" click="updateAMSLayer()"/>
			</mx:HBox>
		</mx:Form>
		<mx:VBox>
			<openscales:ZoomComponent map="{map}"/>
			<mx:Spacer width="100%" />
			<openscales:ZoomBoxComponent map="{map}"
									 width="32"
									 height="32"/>
		</mx:VBox>
	</mx:Canvas>
	
	<mx:Script>
		<![CDATA[
			import com.xoomcode.acidmaps.AMSParameters;
			import com.xoomcode.acidmaps.interpolate.InterpolationStrategy;
			import com.xoomcode.acidmaps.renderer.RendererType;
			import com.xoomcode.acidmaps.simplify.SimplifyMethod;
			import com.xoomcode.constants.Constants;
			
			import mx.formatters.SwitchSymbolFormatter;
			
			import org.openscales.core.Map;
			import org.openscales.core.Trace;
			import org.openscales.core.basetypes.Bounds;
			import org.openscales.core.handler.mouse.DragHandler;
			import org.openscales.core.handler.mouse.WheelHandler;
			import org.openscales.core.layer.ogc.WMS;
			import org.openscales.core.layer.ogc.WMSC;
			import org.openscales.core.layer.params.ogc.WMSParams;
			
			[Bindable] private var map:Map = null;
			[Bindable] public var displayTrace:Boolean = false;	
			[Bindable] public var displayFirebugTrace:Boolean = false;
			
			public var maxZoomLevel:int = 16;
			public var minZoomLevel:int = 0;
			
			private var intervalsSize:int = 5;
			
			[Bindable] private var amsLayer:WMSC; 
			
			private var wmsLayer:WMSC; 
			
			private var overlayLayerName:String = "acidmaps:points_google";

			private function initMap():void {
				Trace.useFireBugConsole = displayFirebugTrace;
				map = fxmap.map;
				
				buildWMSLayer();
				buildAMSLayer();
				map.addLayer(amsLayer);
				wmsLayer.visible = false;
				map.addLayer(wmsLayer);
			}
			
			private function buildWMSLayer():void {
				var wmsParams:WMSParams = new WMSParams(overlayLayerName);
				setGenericParameters(wmsParams);
				wmsParams.transparent = true;
				wmsLayer = buildLayer(wmsParams);
			}
			
			public function buildAMSLayer():void {
				var amsParams:AMSParameters = new AMSParameters(overlayLayerName, "value");
				setGenericParameters(amsParams);
				addRangeColors();
				applyAMSConfiguration(amsParams);

				amsLayer = buildLayer(amsParams);
			}
			
			private function updateAMSLayer():void {
				var amsParams:AMSParameters = new AMSParameters(overlayLayerName, "value");
				setGenericParameters(amsParams);
				applyAMSConfiguration(amsParams);
				amsLayer.params = amsParams;
				amsLayer.redraw(true);
			}
			
			private function applyAMSConfiguration(amsParams:AMSParameters):void {
				amsParams.intervals = rangeComponent.getIntervals();
				amsParams.transparent = false;
				amsParams.filter = null;
				if(cqlFilterText.text != null && cqlFilterText.text != ""){
					amsParams.filter = cqlFilterText.text;
				}
				amsParams.intervalsColors = rangeComponent.getColors();
				amsParams.simplifySize = simplifySize.value;
				amsParams.simplifyMethod = simplifyMethodComboBox.selectedItem.data;
				amsParams.rendererType = rendererTypeComboBox.selectedItem.data;
				amsParams.interpolationStrategy = interpolationStrategyComboBox.selectedItem.data;
				amsParams.interpolationParameter = interpolationParameterText.value;
			}

			private function buildLayer(wmsParams:WMSParams):WMSC {
				var layer:WMSC = new WMSC(name, "http://localhost:8080/geoserver/" + "wms", wmsParams.layers, false, true, wmsParams.srs);
				layer.params = wmsParams;
				layer.maxExtent = map.maxExtent;
				layer.generateResolutions(maxZoomLevel, 32.61198437499843);
				return layer;
			
			}
			
			private function setGenericParameters(params:WMSParams):void {
				params.srs = "EPSG:900913";
				params.format = "image/png";
				params.tiled = true;
				params.transparent = false;
				params.exceptions = "application/vnd.ogc.se_inimage";
			}
			
			private function onServiceTypeComboBoxChange():void {
				if(serviceTypeComboBox.selectedItem.data =="WMS"){
					wmsLayer.visible = true;
					amsLayer.visible = false;
					wmsLayer.redraw(true);
				} else {
					wmsLayer.visible = false;
					amsLayer.visible = true;
					amsLayer.redraw(true);
				}
			}
			
			private function onMapTypeComboBoxChange():void {
				switch (mapTypeComboBox.selectedItem.data)
				{
					case "isoline":
						showIsoline();
						break;
					case "heatmap":
						showHeatmap();
						break;
					case "voronoi":
						showVoronoi();
						break;
					case "point":
						showPoint();
						break;
				}
			}
			
			private function updateAfterTimer():void {
				var timer:Timer = new Timer(250, 1);
				timer.addEventListener(TimerEvent.TIMER_COMPLETE, timerHandler);
				timer.start();
			}
			
			public function timerHandler(event:TimerEvent):void {
				updateAMSLayer();
			}
			
			private function getItemWithData(combo:ComboBox, data:Object):Object {
				for each(var item:Object in combo.dataProvider){
					if(item.data == data){
						return item;
					}
				}
				return null;
			}
			
			private function showIsoline():void {
				cqlFilterText.text = "";
				simplifyMethodComboBox.selectedItem = getItemWithData(simplifyMethodComboBox, SimplifyMethod.GRID);
				simplifySize.value = 2000
				rendererTypeComboBox.selectedItem = getItemWithData(rendererTypeComboBox, RendererType.SPARSE);
				interpolationStrategyComboBox.selectedItem = getItemWithData(interpolationStrategyComboBox, InterpolationStrategy.INVERSE_DISTANCE_WEIGHTING);
				interpolationParameterText.value = 32;
				addRangeColors();
				updateAfterTimer();
			}
			
			private function showHeatmap():void {
				cqlFilterText.text = "";
				simplifyMethodComboBox.selectedItem = getItemWithData(simplifyMethodComboBox, SimplifyMethod.GRID);
				simplifySize.value = 2000
				rendererTypeComboBox.selectedItem = getItemWithData(rendererTypeComboBox, RendererType.GRADIENT);
				interpolationStrategyComboBox.selectedItem = getItemWithData(interpolationStrategyComboBox, InterpolationStrategy.LINEAR);
				interpolationParameterText.value = 32;
				addRangeColors();
				updateAfterTimer();
				
			}
			
			private function showVoronoi():void {
				cqlFilterText.text = "";
				simplifyMethodComboBox.selectedItem = getItemWithData(simplifyMethodComboBox, SimplifyMethod.GRID);
				simplifySize.value = 2000
				rendererTypeComboBox.selectedItem = getItemWithData(rendererTypeComboBox, RendererType.SPARSE);
				interpolationStrategyComboBox.selectedItem = getItemWithData(interpolationStrategyComboBox, InterpolationStrategy.NEAREST_NEIGHBOR);
				interpolationParameterText.value = 32;
				addRangeColors();
				updateAfterTimer();
				
			}
			
			private function showPoint():void {
				cqlFilterText.text = "";
				simplifyMethodComboBox.selectedItem = getItemWithData(simplifyMethodComboBox, SimplifyMethod.GRID);
				simplifySize.value = 2000
				rendererTypeComboBox.selectedItem = getItemWithData(rendererTypeComboBox, RendererType.SPARSE);
				interpolationStrategyComboBox.selectedItem = getItemWithData(interpolationStrategyComboBox, InterpolationStrategy.DUMMY);
				interpolationParameterText.value = 32;
				rangeComponent.reset();
				updateAfterTimer();
			}
			
			private function addRangeColors():void {
				rangeComponent.reset();
				rangeComponent.addItem(10, 0xFFFFFF);
				rangeComponent.addItem(20, 0xFF0000);
				rangeComponent.addItem(45, 0xFFFF00);
				rangeComponent.addItem(70, 0x00FF00);
				rangeComponent.addItem(100, 0x0000FF);
			}
		]]>
	</mx:Script>
</mx:Application>
